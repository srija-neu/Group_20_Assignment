/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package info5100.university.example.Ui.AdminRole;

import java.awt.CardLayout;
import javax.swing.JPanel;

//private JPanel CardSequencePanel;

import info5100.university.example.Persona.Person;
import info5100.university.example.Persona.PersonDirectory;
import info5100.university.example.Persona.UserAccountDirectory;
import info5100.university.example.Persona.UserAccount;
import java.util.ArrayList;
import javax.swing.JPanel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;


/**
 *
 * @author Srija
 */
public class AdministerUserAccountsJPanel extends javax.swing.JPanel {
    private PersonDirectory personDirectory;
    private UserAccountDirectory userAccountDirectory;
    private JPanel CardSequencePanel;
    
    private boolean editMode = false;          // false = load selection; true = save edits
    private String editingUsername = null;

    /**
     * Creates new form AdministerUserAccountsJPanel
     */
    public AdministerUserAccountsJPanel(PersonDirectory pDir,
                                    UserAccountDirectory uaDir,
                                    JPanel cardSequencePanel) {
        initComponents();
        this.personDirectory = pDir;
        this.userAccountDirectory = uaDir;
        this.CardSequencePanel = cardSequencePanel;
        
        cmbRole.removeAllItems();
        cmbRole.addItem("Admin");
        cmbRole.addItem("Faculty");
        cmbRole.addItem("Student");
        cmbRole.addItem("Registrar");
    
        populateUserTable();
    }
    
    private void populateUserTable() {
    DefaultTableModel dtm = (DefaultTableModel) tblUserAccounts.getModel();
    dtm.setRowCount(0);
    for (UserAccount ua : userAccountDirectory.getUserAccountList()) {
        String username = ua.getUserLoginName();
        String name     = (ua.getPerson() != null && ua.getPerson().getName() != null && !ua.getPerson().getName().isEmpty())
                            ? ua.getPerson().getName()
                            : username; // fallback so admin shows up
        String password = ua.getPassword();
        String role     = ua.getRole();
        dtm.addRow(new Object[]{ name, username, password, role });
    }
}

    private Person findPersonByName(String name) {
        if (name == null || name.trim().length() == 0) return null;
        ArrayList<Person> pl = personDirectory.getPersonList();
        for (Person p : personDirectory.getPersonList()) {
            if (p.getName() != null && p.getName().equalsIgnoreCase(name.trim())) return p;
        }
        return null;
        
    }
    
    private void clearFields(){
        txtName.setText("");
        txtUsername.setText("");
        txtPassword.setText("");
        if (cmbRole.getItemCount() > 0) cmbRole.setSelectedIndex(0);
        editingUsername = null;
        editMode = false;
        btnUpdate.setText("Update");
        tblUserAccounts.clearSelection();
    }

    
   

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblName = new javax.swing.JLabel();
        lblUsername = new javax.swing.JLabel();
        lblPassword = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        txtUsername = new javax.swing.JTextField();
        txtPassword = new javax.swing.JTextField();
        lblRole = new javax.swing.JLabel();
        cmbRole = new javax.swing.JComboBox<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblUserAccounts = new javax.swing.JTable();
        btnCreateUser = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();

        lblName.setText("Name");

        lblUsername.setText("Username");

        lblPassword.setText("Password");

        txtName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNameActionPerformed(evt);
            }
        });

        lblRole.setText("Role");

        cmbRole.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        tblUserAccounts.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Name", "Username", "Password", "Role"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tblUserAccounts);

        btnCreateUser.setText("Create User");
        btnCreateUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateUserActionPerformed(evt);
            }
        });

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnBack.setText("<Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(64, 64, 64)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblRole)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(cmbRole, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblUsername)
                                    .addComponent(lblName)
                                    .addComponent(lblPassword))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtPassword, javax.swing.GroupLayout.DEFAULT_SIZE, 97, Short.MAX_VALUE)
                                    .addComponent(txtName)
                                    .addComponent(txtUsername))))
                        .addGap(47, 47, 47)
                        .addComponent(btnCreateUser))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 577, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(15, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addComponent(btnBack)
                .addGap(55, 55, 55)
                .addComponent(btnUpdate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnDelete)
                .addGap(144, 144, 144))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblName)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblUsername)
                    .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblPassword)
                    .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblRole)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cmbRole, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnCreateUser)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnUpdate)
                    .addComponent(btnDelete)
                    .addComponent(btnBack))
                .addGap(24, 24, 24))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNameActionPerformed

    private void btnCreateUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateUserActionPerformed
        // TODO add your handling code here:
        String username = txtUsername.getText().trim();
    String password = txtPassword.getText().trim();
    String role = (cmbRole.getSelectedItem() == null) ? "" : cmbRole.getSelectedItem().toString();
    String personName = txtName.getText().trim();

    if (username.isEmpty() || password.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Username and Password are required.");
        return;
    }
    if (userAccountDirectory.findByUsername(username) != null) {
        JOptionPane.showMessageDialog(this, "Duplicate username.");
        return;
    }

    // Person is optional. If you typed a name but that person does not exist, create a minimal Person.
    Person link = null;
    if (!personName.isEmpty()) {
        link = findPersonByName(personName);
        if (link == null) {
            link = new Person();                   // minimal person record
            link.setUniversityId(username);        // simple unique id (tie to username)
            link.setName(personName);
            personDirectory.addPerson(link, role); // store role consistently
        }
    }

    userAccountDirectory.createUserAccount(username, password, link, role);
    populateUserTable();

    // clear fields
    txtUsername.setText("");
    txtPassword.setText("");
    txtName.setText("");
    if (cmbRole.getItemCount() > 0) cmbRole.setSelectedIndex(0);

    }//GEN-LAST:event_btnCreateUserActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        int row = tblUserAccounts.getSelectedRow();
    if (row < 0) {
        JOptionPane.showMessageDialog(this, "Select a user account row first.");
        return;
    }
    // Table columns: 0-Name, 1-Username, 2-Password, 3-Role
    String username = String.valueOf(tblUserAccounts.getValueAt(row, 1));
    UserAccount ua = userAccountDirectory.findByUsername(username);
    if (ua == null) return;

    // If fields are empty, load selected row into fields first (then user can edit and click Update again)
    boolean nothingTyped = txtUsername.getText().trim().isEmpty()
                        && txtPassword.getText().trim().isEmpty()
                        && txtName.getText().trim().isEmpty();
    if (nothingTyped) {
        txtName.setText(String.valueOf(tblUserAccounts.getValueAt(row, 0)));
        txtUsername.setText(username);
        txtPassword.setText(String.valueOf(tblUserAccounts.getValueAt(row, 2)));
        cmbRole.setSelectedItem(String.valueOf(tblUserAccounts.getValueAt(row, 3)));
        JOptionPane.showMessageDialog(this, "Edit fields, then click Update again to save.");
        return;
    }
    
    String newUsername = txtUsername.getText().trim();
    String newPassword = txtPassword.getText().trim();
    String newRole     = (cmbRole.getSelectedItem() == null) ? "" : cmbRole.getSelectedItem().toString();
    String newName     = txtName.getText().trim();

    // If username changed and collides, block
    if (!newUsername.equals(username) && userAccountDirectory.findByUsername(newUsername) != null) {
        JOptionPane.showMessageDialog(this, "Another account already uses that username.");
        return;
    }

    ua.setUserLoginName(newUsername);
    if (!newPassword.isEmpty()) ua.setPassword(newPassword);
    ua.setRole(newRole);

    if (newName != null && !newName.isEmpty()) {
        Person p = ua.getPerson();
        if (p == null) {
            p = new Person();
            p.setUniversityId(newUsername);
            personDirectory.addPerson(p, newRole);
            ua.setPerson(p);
        }
        p.setName(newName);
        p.setRole(newRole);
    }

    populateUserTable();

    // clear fields
    txtUsername.setText("");
    txtPassword.setText("");
    txtName.setText("");
    if (cmbRole.getItemCount() > 0) cmbRole.setSelectedIndex(0);
        
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        int row = tblUserAccounts.getSelectedRow();
    if (row < 0) return;
    String username = String.valueOf(tblUserAccounts.getValueAt(row, 1)); // username is column 1
    UserAccount ua = userAccountDirectory.findByUsername(username);
    if (ua == null) return;
    userAccountDirectory.deleteUserAccount(ua);
    populateUserTable();
    
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        CardSequencePanel.remove(this);
        ((java.awt.CardLayout) CardSequencePanel.getLayout()).previous(CardSequencePanel);
    }//GEN-LAST:event_btnBackActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnCreateUser;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> cmbRole;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblPassword;
    private javax.swing.JLabel lblRole;
    private javax.swing.JLabel lblUsername;
    private javax.swing.JTable tblUserAccounts;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtPassword;
    private javax.swing.JTextField txtUsername;
    // End of variables declaration//GEN-END:variables
}
