/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package info5100.university.example.Ui.AdminRole;

import info5100.university.example.Persona.StudentDirectory;
import info5100.university.example.Persona.StudentProfile;
import java.util.ArrayList;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import javax.swing.JOptionPane;
/**
 *
 * @author Srija
 */
public class ManageStudentsJPanel extends javax.swing.JPanel {
    private StudentDirectory studentDirectory;
    private javax.swing.JPanel CardSequencePanel;
    private String lastLoadedId = null;
    //private StudentProfile selectedStudent;
    /**
     * Creates new form ManageStudentsJPanel
     */
    public ManageStudentsJPanel(StudentDirectory sDir,
                            javax.swing.JPanel cardSequencePanel) {
        initComponents();
        this.studentDirectory = sDir;
        this.CardSequencePanel = cardSequencePanel;
    
        populateStudentTable(studentDirectory.getStudentList());
    }
    private String cell(int row, int col) {
    Object v = tblStudents.getValueAt(row, col);
    return (v == null) ? "" : v.toString();
}
    
    private void populateStudentTable(ArrayList<StudentProfile> list) {
        DefaultTableModel dtm = (DefaultTableModel) tblStudents.getModel();
    dtm.setRowCount(0);
    for (StudentProfile sp : list) {
        String id    = (sp.getPerson() != null) ? sp.getPerson().getUniversityId() : "";
        String name = (sp.getPerson() != null) ? sp.getPerson().getName() : "";
        String dept = (sp.getPerson() != null) ? sp.getPerson().getDepartment() : "";
        String email= (sp.getPerson() != null) ? sp.getPerson().getEmail() : "";
        String phone= (sp.getPerson() != null) ? sp.getPerson().getPhone() : "";
        String status = sp.getAcademicStatus();
        dtm.addRow(new Object[]{ id, name, dept, email, phone, status });
    }
    }
    private static String safe(String s){
        return (s == null) ? "" : s;
    }
    
    private StudentProfile findStudentById(String id) {
    if (id == null || id.isEmpty()) return null;
    return studentDirectory.findByUniversityId(id);
}
    /*private StudentProfile findStudentByEmail(String email) {
        if (email == null || email.isEmpty()) return null;
        for (StudentProfile sp : studentDirectory.getStudentList()) {
            if (sp.getPerson() != null && email.equalsIgnoreCase(sp.getPerson().getEmail())) {
                return sp;
            }
        }
        return null;
    }*/
        
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        JScrollPane = new javax.swing.JScrollPane();
        tblStudents = new javax.swing.JTable();
        lblDepartment = new javax.swing.JLabel();
        lblEmail = new javax.swing.JLabel();
        txtDepartment = new javax.swing.JTextField();
        txtEmail = new javax.swing.JTextField();
        lblContactInfo = new javax.swing.JLabel();
        lblAcademicStatus = new javax.swing.JLabel();
        txtContactInfo = new javax.swing.JTextField();
        txtAcademicStatus = new javax.swing.JTextField();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        lblSearchID = new javax.swing.JLabel();
        btnSearch = new javax.swing.JButton();
        txtSearchName = new javax.swing.JTextField();
        lblSearchDepartment = new javax.swing.JLabel();
        txtSearchID = new javax.swing.JTextField();
        lblSearchName = new javax.swing.JLabel();
        txtSearchDepartment = new javax.swing.JTextField();
        btnBack = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();

        tblStudents.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Student ID", "Student name", "Department", "Email", "Contact Info", "Academin Status"
            }
        ));
        JScrollPane.setViewportView(tblStudents);

        lblDepartment.setText("Department");

        lblEmail.setText("Email");

        txtDepartment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDepartmentActionPerformed(evt);
            }
        });

        lblContactInfo.setText("Contact info");

        lblAcademicStatus.setText("Academic Status");

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        lblSearchID.setText("SearchID");

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        lblSearchDepartment.setText("SearchDepartment");

        lblSearchName.setText("SearchName");

        txtSearchDepartment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchDepartmentActionPerformed(evt);
            }
        });

        btnBack.setText("<Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnRefresh.setText("Refresh");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(JScrollPane))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblDepartment)
                            .addComponent(lblEmail))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtEmail, javax.swing.GroupLayout.DEFAULT_SIZE, 94, Short.MAX_VALUE)
                            .addComponent(txtDepartment))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(35, 35, 35)
                                .addComponent(lblContactInfo))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(50, 50, 50)
                                .addComponent(lblAcademicStatus)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtContactInfo, javax.swing.GroupLayout.DEFAULT_SIZE, 103, Short.MAX_VALUE)
                            .addComponent(txtAcademicStatus))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnUpdate)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnRefresh))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnDelete)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnBack)))
                        .addGap(48, 48, 48)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblSearchName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtSearchName, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblSearchID)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtSearchID, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(lblSearchDepartment)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtSearchDepartment, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnSearch)
                .addGap(42, 42, 42))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSearch)
                    .addComponent(txtSearchName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSearchDepartment)
                    .addComponent(txtSearchID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSearchName)
                    .addComponent(txtSearchDepartment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSearchID))
                .addGap(18, 18, 18)
                .addComponent(JScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDepartment)
                    .addComponent(txtDepartment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblContactInfo)
                    .addComponent(txtContactInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnUpdate)
                    .addComponent(btnRefresh))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblEmail)
                    .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblAcademicStatus)
                    .addComponent(txtAcademicStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDelete)
                    .addComponent(btnBack))
                .addContainerGap(42, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtDepartmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDepartmentActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDepartmentActionPerformed

    private void txtSearchDepartmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchDepartmentActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchDepartmentActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        int row = tblStudents.getSelectedRow();
    if (row < 0) {
        JOptionPane.showMessageDialog(this, "Select a row first.");
        return;
    }
    
    String id        = cell(row, 0);
    String tableDept = cell(row, 2);
    String tableEmail= cell(row, 3);
    String tablePhone= cell(row, 4);
    String tableStat = cell(row, 5);

    // Phase 1: If this row isn't the one currently loaded, load it and stop.
    if (lastLoadedId == null || !id.equals(lastLoadedId)) {
        txtDepartment.setText(tableDept);
        txtEmail.setText(tableEmail);
        txtContactInfo.setText(tablePhone);
        txtAcademicStatus.setText(tableStat);
        lastLoadedId = id; // mark as loaded
        return;
    }

    // Phase 2: Same row clicked again -> save edits back to backend
    StudentProfile sp = studentDirectory.findByUniversityId(id);
    if (sp == null) {
        JOptionPane.showMessageDialog(this, "Could not find the selected student in directory.");
        lastLoadedId = null;
        return;
    }

    sp.getPerson().setDepartment(txtDepartment.getText().trim());
    sp.getPerson().setEmail(txtEmail.getText().trim());
    sp.getPerson().setPhone(txtContactInfo.getText().trim());
    sp.setAcademicStatus(txtAcademicStatus.getText().trim());

    populateStudentTable(studentDirectory.getStudentList());
    JOptionPane.showMessageDialog(this, "Student updated.");

    // Clear edit fields and reset load state
    txtDepartment.setText("");
    txtEmail.setText("");
    txtContactInfo.setText("");
    txtAcademicStatus.setText("");
    lastLoadedId = null;

    // columns: 0-name, 1-dept, 2-email, 3-phone, 4-status
    // Column order: 0-ID, 1-Name, 2-Dept, 3-Email, 4-Phone, 5-Status
    /*String id    = String.valueOf(tblStudents.getValueAt(row, 0));
    String tableName  = String.valueOf(tblStudents.getValueAt(row, 1));
    String tableDept  = String.valueOf(tblStudents.getValueAt(row, 2));
    String tableEmail = String.valueOf(tblStudents.getValueAt(row, 3));
    String tablePhone = String.valueOf(tblStudents.getValueAt(row, 4));
    String tableStat  = String.valueOf(tblStudents.getValueAt(row, 5));

    // If fields are empty or don't match the selected row -> LOAD into fields
    boolean needLoad =
        txtDepartment.getText().trim().isEmpty() &&
        txtEmail.getText().trim().isEmpty() &&
        txtContactInfo.getText().trim().isEmpty() &&
        txtAcademicStatus.getText().trim().isEmpty();

    if (needLoad) {
        txtDepartment.setText(tableDept);
        txtEmail.setText(tableEmail);
        txtContactInfo.setText(tablePhone);
        txtAcademicStatus.setText(tableStat);
        return; // first click just loads the selected row
    }

    // Otherwise SAVE edits back to model
    StudentProfile sp = findStudentById(id);
    if (sp == null) {
        JOptionPane.showMessageDialog(this, "Could not find the selected student in directory.");
        return;
    }
    sp.getPerson().setDepartment(txtDepartment.getText().trim());
    sp.getPerson().setEmail(txtEmail.getText().trim());
    sp.getPerson().setPhone(txtContactInfo.getText().trim());
    sp.setAcademicStatus(txtAcademicStatus.getText().trim());

    populateStudentTable(studentDirectory.getStudentList());
    JOptionPane.showMessageDialog(this, "Student updated.");
    txtDepartment.setText("");
        txtEmail.setText("");
        txtContactInfo.setText("");
        txtAcademicStatus.setText("");*/
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        int row = tblStudents.getSelectedRow();
    if (row < 0) return;

    String id = cell(row, 0); // Student ID
    StudentProfile sp = studentDirectory.findByUniversityId(id);
    if (sp == null) return;

    studentDirectory.deleteStudent(sp);
    populateStudentTable(studentDirectory.getStudentList());
    lastLoadedId = null;
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        CardSequencePanel.remove(this);
        ((java.awt.CardLayout) CardSequencePanel.getLayout()).previous(CardSequencePanel);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        String n  = txtSearchName.getText().trim().toLowerCase();
        String id = txtSearchID.getText().trim().toLowerCase();
        String d  = txtSearchDepartment.getText().trim().toLowerCase();

        DefaultTableModel dtm = (DefaultTableModel) tblStudents.getModel();
        dtm.setRowCount(0);

        for (StudentProfile sp : studentDirectory.getStudentList()) {
            if (sp == null || sp.getPerson() == null) continue;

            String uid   = safe(sp.getPerson().getUniversityId());
            String name  = safe(sp.getPerson().getName());
            String dept  = safe(sp.getPerson().getDepartment());

            boolean ok = true;
            if (!n.isEmpty()  && !name.toLowerCase().contains(n)) ok = false;
            if (!id.isEmpty() && !uid.toLowerCase().contains(id)) ok = false;
            if (!d.isEmpty()  && !dept.toLowerCase().contains(d)) ok = false;

            if (ok) {
                dtm.addRow(new Object[]{
                    uid,
                    name,
                    dept,
                    safe(sp.getPerson().getEmail()),
                    safe(sp.getPerson().getPhone()),
                    safe(sp.getAcademicStatus())
                });
            }
        }
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        // TODO add your handling code here:
        populateStudentTable(studentDirectory.getStudentList());
    }//GEN-LAST:event_btnRefreshActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane JScrollPane;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JLabel lblAcademicStatus;
    private javax.swing.JLabel lblContactInfo;
    private javax.swing.JLabel lblDepartment;
    private javax.swing.JLabel lblEmail;
    private javax.swing.JLabel lblSearchDepartment;
    private javax.swing.JLabel lblSearchID;
    private javax.swing.JLabel lblSearchName;
    private javax.swing.JTable tblStudents;
    private javax.swing.JTextField txtAcademicStatus;
    private javax.swing.JTextField txtContactInfo;
    private javax.swing.JTextField txtDepartment;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtSearchDepartment;
    private javax.swing.JTextField txtSearchID;
    private javax.swing.JTextField txtSearchName;
    // End of variables declaration//GEN-END:variables
}
