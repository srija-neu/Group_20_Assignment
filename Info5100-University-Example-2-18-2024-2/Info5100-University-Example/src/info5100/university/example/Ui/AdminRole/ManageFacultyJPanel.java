/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package info5100.university.example.Ui.AdminRole;

import info5100.university.example.Persona.Faculty.FacultyDirectory;
import info5100.university.example.Persona.Faculty.FacultyProfile;
import info5100.university.example.CourseCatalog.CourseCatalog;
import info5100.university.example.CourseSchedule.CourseSchedule;
import info5100.university.example.CourseSchedule.CourseOffer;
import java.util.ArrayList;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import javax.swing.JOptionPane;
/**
 *
 * @author Srija
 */
public class ManageFacultyJPanel extends javax.swing.JPanel {

    private FacultyDirectory facultyDirectory;
    private CourseCatalog courseCatalog;
    private CourseSchedule schedule;
    private javax.swing.JPanel CardSequencePanel;
    private FacultyProfile selectedFaculty;
    private String lastLoadedId = null;
    /**
     * Creates new form ManageFacultyJPanel
     */
    public ManageFacultyJPanel(FacultyDirectory fDir,
                               CourseCatalog courseCatalog,
                               CourseSchedule schedule,
                               JPanel cardSequencePanel) {
        initComponents();
        this.facultyDirectory = fDir;
        this.courseCatalog = courseCatalog;
        this.schedule = schedule;
        this.CardSequencePanel = cardSequencePanel;
        
        
        populateFacultyTable(facultyDirectory.getFacultyList());
        populateCourseCombo();
        populateAssignmentsTable();
    }
    
    private static String safe(String s){ return (s == null) ? "" : s; }

    private String cell(int row, int col) {
        Object v = tblFaculty.getValueAt(row, col);
        return (v == null) ? "" : v.toString();
    }
    
    private void populateFacultyTable(ArrayList<FacultyProfile> list) {
        DefaultTableModel dtm = (DefaultTableModel) tblFaculty.getModel();
    dtm.setRowCount(0);
    for (FacultyProfile fp : list) {
        String id    = (fp.getPerson() != null) ? safe(fp.getPerson().getUniversityId()) : "";
        String name = (fp.getPerson() != null) ? fp.getPerson().getName() : "";
        String dept = (fp.getPerson() != null) ? fp.getPerson().getDepartment() : "";
        String email= (fp.getPerson() != null) ? fp.getPerson().getEmail() : "";
        String phone= (fp.getPerson() != null) ? fp.getPerson().getPhone() : "";
        String course = ""; // free text field in UI
        dtm.addRow(new Object[]{ id, name, dept, email, phone });
    }
    }
    
    private void populateAssignmentsTable() {
        DefaultTableModel dtm = (DefaultTableModel) tblAssignFaculty.getModel();
        dtm.setRowCount(0);
        if (schedule == null) return;
        for (CourseOffer co : schedule.getCourseOffers()) {
            if (co == null) continue;
            // Only rows where a faculty is assigned
            try {
                if (co.getFacultyProfile() != null &&
                    co.getFacultyProfile().getPerson() != null) {
                    String facultyName = safe(co.getFacultyProfile().getPerson().getName());
                    String courseNum   = safe(co.getCourseNumber());
                    dtm.addRow(new Object[]{ facultyName, courseNum });
                }
            } catch (Exception ignore) {
                // If no assignment yet, getFacultyProfile() may throw NPE via facultyassignment
            }
        }
    }
    
    private FacultyProfile findFacultyById(String uid) {
        if (uid == null || uid.isEmpty()) return null;
        return facultyDirectory.findByUniversityId(uid);
    }
    
    private void populateCourseCombo() {
        cmbCourse.removeAllItems();
        if (schedule == null) return;
        for (CourseOffer co : schedule.getCourseOffers()) {
            if (co != null) {
                // display course number (e.g., INFO 5100)
                cmbCourse.addItem(co.getCourseNumber());
            }
        }
        if (cmbCourse.getItemCount() > 0) cmbCourse.setSelectedIndex(0);
    }
    
    /*private FacultyProfile findFacultyByEmail(String email) {
        if (email == null || email.isEmpty()) return null;
        for (FacultyProfile fp : facultyDirectory.getFacultyList()) {
            if (fp.getPerson() != null && email.equalsIgnoreCase(fp.getPerson().getEmail())) {
                return fp;
            }
        }
        return null;
    }*/

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblSearchID = new javax.swing.JLabel();
        btnSearch = new javax.swing.JButton();
        txtSearchName = new javax.swing.JTextField();
        lblSearchDepartment = new javax.swing.JLabel();
        txtSearchID = new javax.swing.JTextField();
        lblSearchName = new javax.swing.JLabel();
        txtSearchDepartment = new javax.swing.JTextField();
        JScrollPane = new javax.swing.JScrollPane();
        tblFaculty = new javax.swing.JTable();
        txtDepartment = new javax.swing.JTextField();
        txtEmail = new javax.swing.JTextField();
        lblContactInfo = new javax.swing.JLabel();
        txtContactInfo = new javax.swing.JTextField();
        lblDepartment = new javax.swing.JLabel();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        lblEmail = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblAssignFaculty = new javax.swing.JTable();
        cmbCourse = new javax.swing.JComboBox<>();
        lblCourse = new javax.swing.JLabel();
        btnAssign = new javax.swing.JButton();

        lblSearchID.setText("SearchID");

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        lblSearchDepartment.setText("SearchDepartment");

        lblSearchName.setText("SearchName");

        txtSearchDepartment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchDepartmentActionPerformed(evt);
            }
        });

        tblFaculty.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Faculty ID", "Faculty name", "Department", "Email", "Contact Info"
            }
        ));
        JScrollPane.setViewportView(tblFaculty);

        txtDepartment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDepartmentActionPerformed(evt);
            }
        });

        lblContactInfo.setText("Contact info");

        lblDepartment.setText("Department");

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        lblEmail.setText("Email");

        btnBack.setText("<Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        tblAssignFaculty.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Faculty ID", "Course"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblAssignFaculty);

        cmbCourse.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        lblCourse.setText("Course");

        btnAssign.setText("Assign");
        btnAssign.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAssignActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblSearchName)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtSearchName, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblSearchID)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtSearchID, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblSearchDepartment)
                        .addGap(18, 18, 18)
                        .addComponent(txtSearchDepartment, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnSearch))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblDepartment)
                            .addComponent(lblEmail))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnUpdate)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnDelete))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtDepartment, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(lblContactInfo)
                                .addGap(18, 18, 18)
                                .addComponent(txtContactInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(129, 129, 129)
                        .addComponent(lblCourse)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cmbCourse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(39, 39, 39)
                        .addComponent(btnAssign))
                    .addComponent(btnBack))
                .addContainerGap(101, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(63, 63, 63))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(JScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 409, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(416, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSearch)
                    .addComponent(txtSearchName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSearchDepartment)
                    .addComponent(txtSearchID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSearchName)
                    .addComponent(txtSearchDepartment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSearchID))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDepartment)
                    .addComponent(txtDepartment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblContactInfo)
                    .addComponent(txtContactInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblEmail)
                            .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnUpdate)
                            .addComponent(btnDelete))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cmbCourse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblCourse)
                            .addComponent(btnAssign))
                        .addGap(22, 22, 22)))
                .addComponent(btnBack)
                .addGap(11, 11, 11))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(53, 53, 53)
                    .addComponent(JScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(135, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtSearchDepartmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchDepartmentActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchDepartmentActionPerformed

    private void txtDepartmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDepartmentActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDepartmentActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        String n = txtSearchName.getText().trim().toLowerCase();
        String id = txtSearchID.getText().trim().toLowerCase();
        String d  = txtSearchDepartment.getText().trim().toLowerCase();

        DefaultTableModel dtm = (DefaultTableModel) tblFaculty.getModel();
        dtm.setRowCount(0);

        for (FacultyProfile fp : facultyDirectory.getFacultyList()) {
            if (fp == null || fp.getPerson() == null) continue;

            String uid   = safe(fp.getPerson().getUniversityId());
            String name  = safe(fp.getPerson().getName());
            String dept  = safe(fp.getPerson().getDepartment());
            String email = safe(fp.getPerson().getEmail());
            String phone = safe(fp.getPerson().getPhone());

            boolean ok = true;
            if (!n.isEmpty()  && !name.toLowerCase().contains(n)) ok=false;
            if (!id.isEmpty() && !uid.toLowerCase().contains(id)) ok=false;
            if (!d.isEmpty()  && !dept.toLowerCase().contains(d)) ok=false;

            if (ok){
                dtm.addRow(new Object[]{ uid, name, dept, email, phone, "" });
            }
        }
    }//GEN-LAST:event_btnSearchActionPerformed

    
    
    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        int row = tblFaculty.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(this, "Select a row first.");
            return;
        }

        // Column order: 0-ID, 1-Name, 2-Dept, 3-Email, 4-Phone, 5-Course
        String id        = cell(row, 0);
        String tableDept = cell(row, 2);
        String tableEmail= cell(row, 3);
        String tablePhone= cell(row, 4);

        // Phase 1: if a different row is selected, load fields and mark loaded
        if (lastLoadedId == null || !id.equals(lastLoadedId)) {
            // Fill text fields in requested order: Department, Email, Contact info, Course
            txtDepartment.setText(tableDept);
            txtEmail.setText(tableEmail);
            txtContactInfo.setText(tablePhone);
            //txtCourse.setText(""); // free text (not persisted)
            lastLoadedId = id;
            return;
        }

        // Phase 2: save edits back
        FacultyProfile fp = findFacultyById(id);
        if (fp == null) {
            JOptionPane.showMessageDialog(this, "Could not find the selected faculty in directory.");
            lastLoadedId = null;
            return;
        }

        fp.getPerson().setDepartment(txtDepartment.getText().trim());
        fp.getPerson().setEmail(txtEmail.getText().trim());
        fp.getPerson().setPhone(txtContactInfo.getText().trim());
        // Course field is UI-only; ignore for backend unless you add storage

        populateFacultyTable(facultyDirectory.getFacultyList());
        JOptionPane.showMessageDialog(this, "Faculty updated.");

        // clear edit fields and reset state
        txtDepartment.setText("");
        txtEmail.setText("");
        txtContactInfo.setText("");
        //txtCourse.setText("");
        lastLoadedId = null;
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        int row = tblFaculty.getSelectedRow();
        if (row < 0) return;

        String id = cell(row, 0); // use ID (col 0)
        FacultyProfile fp = findFacultyById(id);
        if (fp == null) return;

        facultyDirectory.delete(fp);
        populateFacultyTable(facultyDirectory.getFacultyList());
        lastLoadedId = null;

    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        CardSequencePanel.remove(this);
        ((java.awt.CardLayout) CardSequencePanel.getLayout()).previous(CardSequencePanel);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnAssignActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAssignActionPerformed
        // TODO add your handling code here:
        int row = tblFaculty.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(this, "Select a faculty row first.");
            return;
        }
        if (schedule == null) {
            JOptionPane.showMessageDialog(this, "No active schedule found.");
            return;
        }
        String courseNum = (String) cmbCourse.getSelectedItem();
        if (courseNum == null || courseNum.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Select a course to assign.");
            return;
        }

        String uid = String.valueOf(tblFaculty.getValueAt(row, 0));
        FacultyProfile fp = findFacultyById(uid);
        if (fp == null) {
            JOptionPane.showMessageDialog(this, "Could not find the selected faculty in directory.");
            return;
        }

        // Optional guard: only allow assignment when faculty.department matches current dept
        // if (fp.getPerson() == null || fp.getPerson().getDepartment() == null) { ... }
        // (All courses in 'schedule' are from the same department, so typically OK.)

        CourseOffer co = schedule.getCourseOfferByNumber(courseNum);
        if (co == null) {
            JOptionPane.showMessageDialog(this, "Course not found in this term: " + courseNum);
            return;
        }

        // Reassign (or assign) faculty to this course
        co.AssignAsTeacher(fp);

        JOptionPane.showMessageDialog(this, "Assigned " + safe(fp.getPerson().getName())
                + " to " + courseNum + ".");
        populateAssignmentsTable();
    }//GEN-LAST:event_btnAssignActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane JScrollPane;
    private javax.swing.JButton btnAssign;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> cmbCourse;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblContactInfo;
    private javax.swing.JLabel lblCourse;
    private javax.swing.JLabel lblDepartment;
    private javax.swing.JLabel lblEmail;
    private javax.swing.JLabel lblSearchDepartment;
    private javax.swing.JLabel lblSearchID;
    private javax.swing.JLabel lblSearchName;
    private javax.swing.JTable tblAssignFaculty;
    private javax.swing.JTable tblFaculty;
    private javax.swing.JTextField txtContactInfo;
    private javax.swing.JTextField txtDepartment;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtSearchDepartment;
    private javax.swing.JTextField txtSearchID;
    private javax.swing.JTextField txtSearchName;
    // End of variables declaration//GEN-END:variables
}
